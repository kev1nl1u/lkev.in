<!DOCTYPE html>
<html lang="en">
<head>
	<meta charset="UTF-8">
	<meta name="viewport" content="width=device-width, initial-scale=1.0">
	<title>Shell</title>
	<link rel="stylesheet" href="css/style.css">
	<script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
</head>
<body spellcheck="false">

	<div class="container">

	<div class="sh">
		<div class="head">
			<p>&copy;<span class="year"></span> lkev.in</p>
			<p>Welcome to <span class="url"></span></p>
			<br/>
			<p><span class="date"></span> @ <span class="user-agent"></span> <span class="ip"></span></p>
			<p>* Last login <span class="last-date"></span> @ <span class="last-user-agent"></span> <span class="last-ip"></span></p>
			<br/>
			<p>Type <code>help</code> to get started.</p>
		</div>
		<div class="commands">
			<div class="line">
				<span class="linestart"><span class="user">user</span>@<span class="url"></span>:<span class="path">~</span>$</span>
				<div class="command-input active" contenteditable="true" spellcheck="false" autofocus autocomplete='off' autocapitalize="off" autocorrect="off"></div>
			</div>
		</div>
	</div>

	</div>

	<script>
		var currentYear = new Date().getFullYear();
		var domain = window.location.hostname || window.location.host || window.location.href.split("/")[2] || 'localhost';
		var userAgent;

		document.addEventListener("DOMContentLoaded", async function() {

			// year
			document.querySelectorAll('.year').forEach(el => el.textContent = currentYear);

			// domain
			document.querySelectorAll('.url').forEach(el => el.textContent = domain);

			// date
			const now = new Date();
			const options = {
				day: '2-digit',
				month: 'short',
				year: 'numeric',
				hour: '2-digit',
				minute: '2-digit',
				second: '2-digit',
				hour12: false,
				timeZone: Intl.DateTimeFormat().resolvedOptions().timeZone
			};
			const formattedDate = new Intl.DateTimeFormat(navigator.language, options).format(now);
			const dateEl = document.querySelector('.date');
			if (dateEl) dateEl.textContent = formattedDate;

			const lastDateEl = document.querySelector('.last-date');
			let lastDate = '<%= lastLogin.request_date %>' || 'never';
			// Format last login date if available
			if (lastDate !== 'never') {
				const lastDateObj = new Date(lastDate); // JS converts ISO string to local time automatically
				const options = {
					day: '2-digit',
					month: 'short',
					year: 'numeric',
					hour: '2-digit',
					minute: '2-digit',
					second: '2-digit',
					hour12: false
				};
				lastDate = new Intl.DateTimeFormat(navigator.language, options).format(lastDateObj);
			}
			if (lastDateEl) lastDateEl.textContent = lastDate;

			// User agent
			const os = getOS();
			const browser = getBrowser();
			if (!os && !browser) {
				userAgent = 'unknown agent';
			} else if (os && !browser) {
				userAgent = os;
			} else if (!os && browser) {
				userAgent = browser;
			} else {
				userAgent = os + ' / ' + browser;
			}
			const userAgentEl = document.querySelector('.user-agent');
			if (userAgentEl) userAgentEl.textContent = userAgent;

			const lastUserAgentEl = document.querySelector('.last-user-agent');
			if (lastUserAgentEl) lastUserAgentEl.textContent = '<%= lastLogin.user_agent %>' || 'unknown agent';

			// IP
			const ipEl = document.querySelector('.ip');
			const ipValue = await getIP(ipEl);

			const lastIpEl = document.querySelector('.last-ip');
			if (lastIpEl) lastIpEl.textContent = '<%= lastLogin.ip %>' || '';

			// Save login info to backend
			try {
				const response = await fetch('/api/save-login', {
				method: 'POST',
				headers: { 'Content-Type': 'application/json' },
				body: JSON.stringify({
					login_date: now.toISOString(),
					user_agent: userAgent || 'unknown agent',
					ip_address: ipValue || null
				})
				});

				if (!response.ok) throw new Error(response.statusText);
				const data = await response.json();
			} catch (err) {
				console.error('Error saving login info:', err);
			}
		});

		// =============================
		// Helper functions
		// =============================
		async function getIP(ipEl) {
			try {
				const response = await fetch('https://api.ipify.org?format=json');
				if (!response.ok) throw new Error(response.statusText);
				const data = await response.json();
				const ip = data.ip || null;
				if (ipEl) ipEl.textContent = ip || 'unknown';
				return ip;
			} catch (error) {
				console.error('Error fetching IP address:', error);
				if (ipEl) ipEl.textContent = 'unknown';
				return null;
			}
		}

		function getOS() {
			const platform = navigator.platform.toLowerCase();
			if (platform.includes('win')) return 'Windows';
			if (platform.includes('mac')) return 'MacOS';
			if (platform.includes('linux')) return 'Linux';
			if (/iphone|ipad|ipod/.test(navigator.userAgent.toLowerCase())) return 'iOS';
			if (/android/.test(navigator.userAgent.toLowerCase())) return 'Android';
			return 'Unknown';
		}

		function getBrowser() {
			const ua = navigator.userAgent;
			if (ua.includes("Chrome") && !ua.includes("Edg") && !ua.includes("OPR")) return "Chrome";
			if (ua.includes("Firefox")) return "Firefox";
			if (ua.includes("Safari") && !ua.includes("Chrome")) return "Safari";
			if (ua.includes("Edg")) return "Edge";
			if (ua.includes("OPR") || ua.includes("Opera")) return "Opera";
			return "Unknown";
		}


		// click anywhere to focus input - unless highlighting text
		$(document).on('click', function(e) {
			const selection = window.getSelection();
			if (selection && selection.toString().length === 0) {
				$('.command-input').focus();
			}
		});

		var commands = []; // TODO save in localStorage
		var commandIndex = 0; // points at the next position to insert (empty)

		$(document).on('keydown', '.command-input.active', function(e) {
			if (e.key === 'Enter') {
				e.preventDefault();
				$(this).removeAttr("contenteditable");
				const command = $(this).text().trim();
				if (command.length === 0) {
					printNewPrompt();
					return;
				}
				if(commands.length === 0 || commands[commands.length - 1] !== command) commands.push(command);
				commandIndex = commands.length;
				$(this).removeClass("active");
				handleCommand(command);
				if (!command.startsWith("sudo") || command == "sudo") printNewPrompt();
				else{
					printOutput(`<div class="line">[sudo] password:
<div class="password-input active" contenteditable="true" spellcheck="false" autofocus autocomplete='off' autocapitalize="off" autocorrect="off"></div></div>`
					);
					$('.password-input.active').focus();
					// event listeners
					var psw = "";
					$('.password-input.active')
					.on('beforeinput', function(e) {
						e.preventDefault(); // stop text from appearing in the contenteditable

						const inputType = e.originalEvent.inputType;
						const data = e.originalEvent.data;

						if (inputType === "insertText") {
						psw += data; // add typed char
						} else if (inputType === "deleteContentBackward") {
						psw = psw.slice(0, -1); // handle backspace
						}
					})
					.on('keydown', function(e) {
						if (e.key === 'Enter') {
						e.preventDefault();
						$(this).removeAttr("contenteditable").removeClass("active");

						if (psw.length === 0) {
							printError(command, 'no password entered');
							printNewPrompt();
							return;
						}

						$.ajax({
							url: '/api/sudo',
							method: 'POST',
							contentType: 'application/json',
							data: JSON.stringify({ password: psw, arg: command.slice(5).trim() }),
							success: (response) => {
							if (response.valid) {
								const argCommand = command.slice(5).trim().split(' ')[0].toLowerCase();
								if (['clear', 'about', 'echo', 'cfu', 'ig', 'gh', 'li', 'fn', 'ferminotify', 'uni'].includes(argCommand)) {
								handleCommand(command.slice(5).trim());
								} else {
								if (response.output && response.output.length > 0) {
									printOutput(`<p>${response.output}</p>`);
									if (response.redirect) {
									if (response.target === '_blank') window.open(response.redirect, '_blank');
									else window.open(response.redirect, '_self');
									}
								}
								}
							} else {
								printError(command, 'authentication failure');
							}
							printNewPrompt();
							},
							error: () => {
							printError(command, 'error verifying password');
							printNewPrompt();
							}
						});
						} else if (e.key === 'c' && (e.ctrlKey || e.metaKey)) {
						e.preventDefault();
						$(this).removeAttr("contenteditable").removeClass("active");
						printError(command, 'command canceled');
						printNewPrompt();
						}
					});
				}
			}else if (e.key === 'ArrowUp') {
				e.preventDefault();
				if (commands.length === 0) return; // no history
				commandIndex--;
				if (commandIndex < 0) {
					commandIndex = 0;
					return;
				}
				$(this).text(commands[commandIndex]);
				// put cursor at end
				const el = this;
				const range = document.createRange();
				const sel = window.getSelection();
				range.selectNodeContents(el);
				range.collapse(false);
				sel.removeAllRanges();
				sel.addRange(range);
			} else if (e.key === 'ArrowDown') {
				e.preventDefault();
				if (commands.length === 0) return; // no history
				commandIndex++;
				if (commandIndex >= commands.length) {
					$(this).text('');
					return;
				}
				$(this).text(commands[commandIndex]);
				// put cursor at end
				const el = this;
				const range = document.createRange();
				const sel = window.getSelection();
				range.selectNodeContents(el);
				range.collapse(false);
				sel.removeAllRanges();
				sel.addRange(range);
			}
		});

		function getOS() {
			const platform = navigator.platform.toLowerCase();
			if (platform.includes('win')) return 'Windows';
			if (platform.includes('mac')) return 'MacOS';
			if (platform.includes('linux')) return 'Linux';
			if (/iphone|ipad|ipod/.test(navigator.userAgent.toLowerCase())) return 'iOS';
			if (/android/.test(navigator.userAgent.toLowerCase())) return 'Android';
			return 'Unknown';
		}
		function getBrowser() {
			const ua = navigator.userAgent;
			if (ua.includes("Chrome") && !ua.includes("Edg") && !ua.includes("OPR")) return "Chrome";
			if (ua.includes("Firefox")) return "Firefox";
			if (ua.includes("Safari") && !ua.includes("Chrome")) return "Safari";
			if (ua.includes("Edg")) return "Edge";
			if (ua.includes("OPR") || ua.includes("Opera")) return "Opera";
			return "Unknown";
		}

		// =============================
		// Terminal Command System
		// =============================
		
		// Helper functions for terminal output
		function printOutput(content) {
			$('.commands').append(`<div class="output line">${content}</div>`);
		}

		function printError(command, message) {
			if (command && command.length > 0)
				printOutput(`<p>${command}: ${message}</p>`);
			else
				printOutput(`<p>${message}</p>`);
		}

		function validateNoArgs(command, args) {
			if (args.length > 0) {
				printError(command, `unrecognized argument: ${args.join(' ')}`);
				return false;
			}
			return true;
		}

		// Command configuration with args validation
		const commandConfig = {
			help: {
				acceptsArgs: false,
				description: 'display this help message',
				execute: (args) => {
					if (!validateNoArgs('help', args)) return;
					
					printOutput(`
						<p>${domain} ${userAgent} Bash, version 1.0-release<br/>These shell commands are defined internally. Type 'help' to see this list.</p>
						<div class="command-help-list">
							<p><code>help</code> display this help message</p>
							<p><code>about</code> information about me</p>
							<p><code>ls</code> list connections</p>
							<p><code>ferminotify</code> / <code>fn</code> connect to Fermi Notify [<code>-blank</code>, <code>-status</code>]</p>
							<p><code>uni</code> connect to my uni tools [<code>-blank</code>]</p>
							<p><code>cfu</code> get my current cfu count</p>
							<p><code>ig</code> my Instagram [<code>-blank</code>]</p>
							<p><code>gh</code> my GitHub [<code>-blank</code>]</p>
							<p><code>li</code> my LinkedIn [<code>-blank</code>]</p>
							<p><code>sudo</code> get superuser privileges [command [arg...]]</p>
							<p><code>info</code> your system information</p>
							<p><code>env</code> display .env file</p>
							<p><code>echo [text]</code> display text</p>
							<p><code>clear</code> clear the terminal</p>
						</div>
					`);
				}
			},
			
			clear: {
				acceptsArgs: false,
				description: 'clear the terminal',
				execute: (args) => {
					if (!validateNoArgs('clear', args)) return;
					$('.sh').html('<div class="commands"></div>');
				}
			},
			
			about: {
				acceptsArgs: false,
				description: 'information about me',
				execute: (args) => {
					if (!validateNoArgs('about', args)) return;
					printOutput(`
						<p>I'm Kevin, a Computer Engineering student at the University of Padua (UniPD), and a graduate of I.S. E. Fermi Mantova.<br/>
						You can explore my open source projects on <a href="https://lkev.in/gh" target="_blank" rel="noopener">GitHub</a>.</p>
					`);
				}
			},
			
			ls: {
				acceptsArgs: false,
				description: 'list connections',
				execute: (args) => {
					if (!validateNoArgs('ls', args)) return;
					printOutput(`
						<p>Available connections:<br/>	
						<code>fn</code> / <code>ferminotify</code>: Fermi Notify<br/>
						<code>uni</code>: Uni tools<br/>
						<code>ig</code>: Instagram<br/>
						<code>gh</code>: GitHub<br/>
						<code>li</code>: LinkedIn<br/>
						Use [command] <code>-blank</code> to open in a new tab.</p>
					`);
				}
			},
			
			cfu: {
				acceptsArgs: false,
				description: 'get my current cfu count',
				execute: (args) => {
					if (!validateNoArgs('cfu', args)) return;
					printOutput('<p>WIP</p>');
				}
			},
			
			sudo: {
				acceptsArgs: true,
				description: 'get superuser privileges [command [arg...]]',
				execute: (args) => {
					if (args.length === 0) {
						printOutput('<p>usage: <code>sudo</code> [command [arg...]]</p>');
						return;
					}
					
				}
			},

			env: {
				acceptsArgs: false,
				description: 'display .env file',
				execute: (args) => {
					if (!validateNoArgs('env', args)) return;
					printOutput(`<p>USER="you"<br/>STUPID="true"<br/>ASTI="esplosa"<br/>SUDO="nano"</p>
					`);
				}
			},
			
			echo: {
				acceptsArgs: true,
				description: 'display text',
				execute: (args) => {
					const text = args.length > 0 ? args.join(' ') : '';
					printOutput(`<p>${text}</p>`);
				}
			}
		};

		// Link configuration with supported options
		const linkConfig = {
			fn: { url: 'https://fn.lkev.in', name: 'Fermi Notify' },
			ferminotify: { url: 'https://fn.lkev.in', name: 'Fermi Notify' },
			uni: { url: 'https://unipv.lkev.in', name: 'Uni tools' },
			ig: { url: 'https://lkev.in/ig', name: 'Instagram' },
			gh: { url: 'https://lkev.in/gh', name: 'GitHub' },
			li: { url: 'https://lkev.in/li', name: 'LinkedIn' }
		};

		function handleLinkCommand(command, args, config) {
			if (args.length === 0) {
				window.open(config.url, '_self');
				printOutput(`<p>Connecting to ${config.name}...</p>`);
			} else if (args.length === 1 && args[0] === '-blank') {
				window.open(config.url, '_blank');
				printOutput(`<p>Connecting to ${config.name} in a new tab...</p>`);
			} else {
				printError(command, `unrecognized argument: ${args.join(' ')}`);
			}
		}

		function handleCommand(input) {
			const commandParts = input.trim().split(' ');
			const command = commandParts[0].toLowerCase();
			const args = commandParts.slice(1);

			// Check built-in commands
			if (commandConfig[command]) {
				commandConfig[command].execute(args);
			}
			// Check link commands
			else if (linkConfig[command]) {
				handleLinkCommand(command, args, linkConfig[command]);
			}
			// Unknown command
			else {
				printError('', `Unrecognized command: ${command}`);
			}

			window.scrollTo(0, document.body.scrollHeight);
		}

		function printNewPrompt(){
			$('.commands').append(`
<div class="line">
	<span class="linestart"><span class="user">user</span>@<span class="url">${domain}</span>:<span class="path">~</span>$</span>
	<div class="command-input active" contenteditable="true" autofocus autocomplete='off' autocapitalize="off" autocorrect="off"></div>
</div>
			`);
			$('.command-input.active').focus();
			window.scrollTo(0, document.body.scrollHeight);
		}
	</script>
</body>
</html>
		